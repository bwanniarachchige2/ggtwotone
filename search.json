[{"path":"https://bwanniarachchige2.github.io/ggtwotone/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Beenu Sareena Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Beenu Sareena. Author, maintainer.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sareena B (2025). ggtwotone: Dual-Tone Contrast-Aware ggplot2 Geoms. R package version 0.1.0, https://github.com/bwanniarachchige2/ggtwotone.","code":"@Manual{,   title = {ggtwotone: Dual-Tone and Contrast-Aware ggplot2 Geoms},   author = {Beenu Sareena},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/bwanniarachchige2/ggtwotone}, }"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/index.html","id":"ggtwotone","dir":"","previous_headings":"","what":"Dual-Tone and Contrast-Aware ggplot2 Geoms","title":"Dual-Tone and Contrast-Aware ggplot2 Geoms","text":"ggtwotone R package extends ggplot2 dual-stroke contrast-aware geoms. helps create clear, high-contrast annotations lines remain visible across complex variable backgrounds.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/index.html","id":"whats-inside","dir":"","previous_headings":"","what":"What’s Inside","title":"Dual-Tone and Contrast-Aware ggplot2 Geoms","text":"geom_segment_dual(): Dual-stroke line segments vertical offset geom_lm_dual(): Dual-tone regression line contrast-aware strokes geom_curve_dual(): Dual-stroke curved line annotations geom_curve_dual_function(): Plot mathematical statistical functions smooth dual-stroke curves geom_text_contrast(): Automatically switches light/dark text color based background adjust_contrast_pair(): Helper function find contrast-boosted color pairs using WCAG/APCA","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dual-Tone and Contrast-Aware ggplot2 Geoms","text":"can install development version ggtwotone GitHub :","code":"# install.packages(\"pak\") pak::pak(\"bwanniarachchige2/ggtwotone\")"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Dual-Tone and Contrast-Aware ggplot2 Geoms","text":"examples show use package:   example visualizes wind directions speeds zone-classified terrain map using geom_segment_dual(). Arrow length scaled wind speed (m/s), dual-stroke styling ensures clear visibility across contrasting terrain types desert, forest, sea, urban zones.    SEM micrograph dual-stroke measurement overlay","code":"library(ggtwotone) # automatically loads ggplot2 if it is not active #> Loading required package: ggplot2 library(magick) #> Linking to ImageMagick 6.9.12.93 #> Enabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp #> Disabled features: fftw, ghostscript, x11 library(grid)  img <- magick::image_read(\"man/figures/background_image.jpg\")  # Convert image to a rasterGrob bg_grob <- grid::rasterGrob(img, width = unit(1,\"npc\"), height = unit(1,\"npc\"))  # Plot ggplot() +   annotation_custom(bg_grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +    geom_curve_dual_function(     fun = dnorm,     xlim = c(-3, 6),     base_color = \"blue\",     linewidth = 2,     smooth = TRUE   ) +    geom_curve_dual_function(     fun = function(x) 0.5 * exp(-abs(x - 2)),     xlim = c(-3, 6),     colour1 = \"#FFFFCC\",     colour2 = \"#4B0000\",     linewidth = 2,     smooth = TRUE   ) +    coord_cartesian(ylim = c(0, 0.5)) +   theme_void() +   theme(     plot.background = element_rect(fill = \"transparent\", color = NA),     panel.background = element_rect(fill = \"transparent\", color = NA)   ) +   labs(     title = \"Curves over Image Background\",     subtitle = \"Dual-stroke rendering stays visible over image background\"   ) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # Zone-colored background set.seed(42) tile_df <- expand.grid(x = -7:7, y = -7:7) zones <- c(\"Desert\", \"Forest\", \"Sea\", \"Urban\") zone_colors <- c(   \"Desert\" = \"#EDC9AF\",   \"Forest\" = \"#14532d\",   \"Sea\"    = \"#0F3556\",   \"Urban\"  = \"#eeeeee\" ) tile_df$zone <- sample(   zones,   size = nrow(tile_df),   replace = TRUE,   prob = c(0.2, 0.2, 0.4, 0.2) )  # Realistic wind vectors set.seed(42) n <- 25 wind_df <- data.frame(   x = sample(-4:4, n, replace = TRUE),   y = sample(-4:4, n, replace = TRUE),   angle = runif(n, 180, 270),  # Southwest quadrant   speed = runif(n, 1.5, 4)     # Speed in m/s ) |>   mutate(     xend = x + speed * cos(angle * pi / 180),     yend = y + speed * sin(angle * pi / 180)   )  # Plot ggplot() +   geom_tile(data = tile_df, aes(x = x, y = y, fill = zone)) +   scale_fill_manual(values = zone_colors, name = \"Zone Type\") +    geom_segment_dual(     data = wind_df,     aes(x = x, y = y, xend = xend, yend = yend), #    colour1 = \"#FFFFFF\", colour2 = \"#111111\",     linewidth = 1.2,     arrow = arrow(length = unit(0.15, \"inches\"), type = \"open\"),     alpha = 0.9   ) +   coord_fixed(xlim = range(c(wind_df$x, wind_df$xend)),             ylim = range(c(wind_df$y, wind_df$yend))) +   theme_minimal(base_size = 14) +   theme(     panel.background = element_rect(fill = \"white\", color = NA)   ) +   labs(     title = \"Wind Directions Across Zones\",     subtitle = \"Arrow direction and length represent wind flow and speed (m/s);\\ndual-stroke improves visibility\",     x = \"Longitude\",     y = \"Latitude\"   ) #> Warning in geom_segment_dual(data = wind_df, aes(x = x, y = y, xend = xend, : #> Ignoring empty aesthetics: `colour1` and `colour2`. library(ggplot2) library(ggtwotone)  df <- mpg  # plot ggplot(df, aes(x = displ, y = hwy)) +   geom_point(color = \"darkgreen\", size = 3, alpha = 0.7) +    geom_lm_dual(     data = df,     mapping = aes(x = displ, y = hwy),     method = \"lm\",     formula = hwy ~ displ,     base_color = \"#555555\",     contrast = 4.5,     method_contrast = \"auto\",     linewidth = 1.2   ) +    theme_minimal(base_size = 14) +   labs(     title = \"Engine Displacement vs. Highway MPG\",     subtitle = \"Regression line with dual-stroke contrast for visibility\",     x = \"Displacement (L)\",     y = \"Highway MPG\"   ) library(dplyr)  # Sample from real storm data data(\"storms\", package = \"dplyr\")  storm_subset <- storms %>%   filter(name == \"Katrina\", year == 2005) %>%   mutate(     x = lag(long), y = lag(lat),     xend = long, yend = lat   ) %>%   filter(!is.na(x), !is.na(y))  # remove first row with NA lag  # Plot ggplot(storm_subset) +   geom_segment_dual(     aes(x = x, y = y, xend = xend, yend = yend, group = 1),     color1 = \"white\", color2 = \"black\",     linewidth = 1.2,     arrow = arrow(length = unit(0.08, \"inches\"), type = \"open\")   ) +   geom_point(aes(x = xend, y = yend, color = wind), size = 2) +   scale_color_viridis_c(option = \"C\", name = \"Wind Speed\") +   coord_fixed() +   labs(     title = \"Storm Track of Hurricane Katrina (2005)\",     subtitle = \"Arrow direction shows storm movement; \\nstroke ensures visibility on top of wind-colored dots\",     x = \"Longitude\", y = \"Latitude\"   ) +   theme_dark() #> Warning: Duplicated aesthetics after name standardisation: colour1 and colour2 #> Warning in geom_segment_dual(aes(x = x, y = y, xend = xend, yend = yend, : #> Ignoring empty aesthetics: `colour1` and `colour2`. library(ggplot2) library(magick)  img_path   <- \"micro_image.jpg\" um_per_px  <- 0.05                  # <-- calibration: micrometers per pixel bar_um     <- 10                    # scale bar length in micrometers  # Load image as a background grob img <- magick::image_read(img_path) w   <- magick::image_info(img)$width h   <- magick::image_info(img)$height bg  <- grid::rasterGrob(img, width = unit(1, \"npc\"), height = unit(1, \"npc\"))   meas <- data.frame(   x = 0.3218, y = 0.4507, xend = 0.7974, yend = 0.6371   # <-- adjust to your line )  # Compute physical length for the label dx_px  <- abs(meas$xend - meas$x) * w dy_px  <- abs(meas$yend - meas$y) * h len_um <- sqrt(dx_px^2 + dy_px^2) * um_per_px lab    <- sprintf(\"%.1f \\u00B5m\", len_um)  # Midpoint for the label xm <- (meas$x + meas$xend)/2 ym <- (meas$y + meas$yend)/2 lab_df <- data.frame(x = xm, y = ym + 0.05, label = lab)  #Plot ggplot() +   # background SEM image   annotation_custom(bg, xmin = 0, xmax = 1, ymin = 0, ymax = 1) +   # measurement line with dual stroke   geom_segment_dual(     data = meas,     aes(x = x, y = y, xend = xend, yend = yend),     colour1 = \"#0D0D0D\",     colour2 = \"#FFFFFF\",     linewidth = 1.2,     lineend = \"round\",     arrow = grid::arrow(ends = \"both\", length = unit(0.18, \"in\"), type = \"open\")    ) +   # measurement label (contrast-aware)   geom_text_contrast(     data = lab_df,     aes(x = x, y = y, label = label),      background = \"#444444\",     size = 4.2   ) +   coord_fixed(xlim = c(0, 1), ylim = c(0, 1), expand = FALSE) +   theme_void()"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/index.html","id":"drawing-two-lines-side-by-side","dir":"","previous_headings":"","what":"Drawing two lines side by side","title":"Dual-Tone and Contrast-Aware ggplot2 Geoms","text":"basic idea drawing line segments segment_dual geom replace line segment B two line segments drawn side sidein different color hues chosen least one coior hues sufficiently large (color) contrast background colors.","code":"dframe <- data.frame(x =c(1,3,5), xmax = c(2, 4, 6), y = c(3,2,1), ymax=c(3,4,5), group = 4:6) dframe |>    ggplot(aes(x = x, xend=xmax, y = y, yend=ymax)) +    geom_point(size = 5) +    geom_point(aes(x = xmax, y = ymax), size = 5) +   geom_segment(aes(group = group), linewidth = 20, alpha = 0.5) +   geom_segment_dual(aes(group = group, color1 = factor(group)), linewidth = 20, alpha = 0.5) +   theme_bw() + theme(aspect.ratio = 1/3) #+  #> Warning in geom_segment_dual(aes(group = group, color1 = factor(group)), : #> Ignoring empty aesthetics: `colour1` and `colour2`. #  geom_point(size = 5) +  #  geom_point(aes(x = xmax, y = ymax), size = 5)"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Dual-Tone and Contrast-Aware ggplot2 Geoms","text":"real-world plots, especially mixed backgrounds (grayscale tiles, images, map layers), default ggplot2 annotations can disappear. ggtwotone solves : Dual-stroke visibility: top bottom layers ensure readability Contrast checking: uses APCA/WCAG optimize color pairing Fallback safety: gracefully assigns black/white needed can explore functions Reference Manual, see R help tab loading package.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/adjust_contrast_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Contrast Between Two Stroke Colors — adjust_contrast_pair","title":"Adjust Contrast Between Two Stroke Colors — adjust_contrast_pair","text":"Given base color background, generate pair colors (light dark) sufficient perceptual contrast using WCAG APCA methods.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/adjust_contrast_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Contrast Between Two Stroke Colors — adjust_contrast_pair","text":"","code":"adjust_contrast_pair(   color,   contrast = 4.5,   method = \"auto\",   background = \"#FFFFFF\",   quiet = FALSE )"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/adjust_contrast_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Contrast Between Two Stroke Colors — adjust_contrast_pair","text":"color base color, hex string valid R color name (e.g., \"#6699CC\", \"darkred\"). contrast Minimum desired contrast ratio (default 4.5). method Contrast method: \"WCAG\", \"APCA\", \"auto\" try . background Background color, hex string valid R color name (default: \"#FFFFFF\"). quiet Logical. TRUE, suppresses warnings.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/adjust_contrast_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Contrast Between Two Stroke Colors — adjust_contrast_pair","text":"list elements light, dark, contrast, method.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/adjust_contrast_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Contrast Between Two Stroke Colors — adjust_contrast_pair","text":"","code":"adjust_contrast_pair(\"#777777\", contrast = 4.5, method = \"auto\", background = \"#000000\") #> $light #> [1] \"#303030\" #>  #> $dark #> [1] \"#F1F1F1\" #>  #> $contrast #> [1] 18.59245 #>  #> $method #> [1] \"WCAG\" #>   adjust_contrast_pair(\"#66CCFF\", contrast = 4.5, method = \"APCA\", background = \"#FAFAFA\") #> $light #> [1] \"#9FFCFF\" #>  #> $dark #> [1] \"#004279\" #>  #> $contrast #> [1] 90.11555 #>  #> $method #> [1] \"APCA\" #>"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual-Stroke Curved Line Annotations — geom_curve_dual","title":"Dual-Stroke Curved Line Annotations — geom_curve_dual","text":"geom_curve_dual() draws dual-tone curved line using two strokes (light/dark), slight perpendicular offset ensure visibility across mixed backgrounds.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual-Stroke Curved Line Annotations — geom_curve_dual","text":"","code":"geom_curve_dual(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   curvature = 0.3,   angle = 90,   ncp = 5,   base_color = NULL,   contrast = 4.5,   method_contrast = \"WCAG\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dual-Stroke Curved Line Annotations — geom_curve_dual","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. curvature Bend curve (positive = counter-clockwise). angle Angle two control points (default: 90). ncp Number control points (default: 5). base_color Base Color derive dual-tone pair . contrast Minimum contrast ratio aim (default 4.5). method_contrast Contrast algorithm use (\"WCAG\", \"APCA\", \"auto\") na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dual-Stroke Curved Line Annotations — geom_curve_dual","text":"","code":"library(ggplot2)  # Basic dual-stroke curve ggplot() +   geom_curve_dual(     aes(x = 1, y = 1, xend = 4, yend = 4),     curvature = 0.4, linewidth = 2   ) +   theme_void() +   theme(panel.background = element_rect(fill = \"black\"))   # Sine wave style dual-stroke curve with points ggplot() +   geom_curve_dual(     aes(x = 2, y = 1, xend = 4, yend = 3),     curvature = 0.3,     linewidth = 2, base_color = \"red\"   ) +   geom_point(aes(x = 2, y = 1), colour = \"red\", size = 3) +   geom_point(aes(x = 4, y = 3), colour = \"blue\", size = 3) +   theme_dark(base_size = 14)   # Curve on a grayscale tile background tile_df <- expand.grid(x = 1:6, y = 1:4) tile_df$fill <- gray.colors(nrow(tile_df), start = 0, end = 1)  ggplot() +   geom_tile(data = tile_df, aes(x = x, y = y, fill = fill), width = 1, height = 1) +   geom_curve_dual(     data = data.frame(x = 1, y = 1, xend = 6, yend = 4),     aes(x = x, y = y, xend = xend, yend = yend),     colour1 = \"white\", colour2 = \"black\",     curvature = 0.4,     linewidth = 2   ) +   scale_fill_identity() +   theme_void() +   coord_fixed()"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual-Tone Curved Function Lines — geom_curve_dual_function","title":"Dual-Tone Curved Function Lines — geom_curve_dual_function","text":"Draws function (e.g., density mathematical curve) using perceptually offset dual-stroke curved line segments.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual-Tone Curved Function Lines — geom_curve_dual_function","text":"","code":"geom_curve_dual_function(   fun,   xlim = c(-3, 3),   n = 701,   curvature = 0,   angle = 90,   ncp = 5,   colour1 = NULL,   colour2 = NULL,   base_color = NULL,   contrast = 4.5,   method_contrast = \"WCAG\",   linewidth = 1.2,   args = list(),   smooth = TRUE,   color1 = NULL,   color2 = NULL,   alpha = 1,   ... )"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dual-Tone Curved Function Lines — geom_curve_dual_function","text":"fun function evaluate (e.g., dnorm, dt). xlim Range x-values evaluate (numeric vector length 2). n Number segments compute (default: 201). curvature, angle, ncp Passed underlying geom_curve_dual segments. colour1, colour2 Fixed top/bottom stroke colours. colour1 given, colour2 derived contrast. (Aliases color1/color2 also accepted.) base_color Optional base color derive contrast pair (overrides colour1/colour2 supplied). contrast, method_contrast Passed adjust_contrast_pair() deriving colors. linewidth Stroke width top line. args List arguments passed fun (example, list(df = 1) dt). smooth Use smooth dual-stroke curves (geom_path) instead segmented curves (geom_curve_dual). Default TRUE. color1, color2 U.S.-spelling aliases colour1/colour2. Identical effect; prefer colour1/colour2 code examples. alpha Overall opacity strokes (0–1). ... Additional arguments passed geom_curve_dual().","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dual-Tone Curved Function Lines — geom_curve_dual_function","text":"ggplot2 layer curved segments.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_curve_dual_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dual-Tone Curved Function Lines — geom_curve_dual_function","text":"","code":"library(ggplot2)  base <- ggplot() + xlim(-2.05,2.05) base +   geom_curve_dual_function(   fun = function(x) 0.5 * exp(-abs(x)),   xlim = c(-2, 2),   color1 = \"#EEEEEE\",   color2 = \"#222222\",   linewidth = 1,   smooth = TRUE   ) +   theme_dark()    ggplot() +   geom_curve_dual_function(     fun = dnorm,     xlim = c(-5, 5),     base_color = \"green\",     linewidth = 1,     smooth = TRUE   ) +   geom_curve_dual_function(     fun = dt,     args = list(df = 1),     xlim = c(-5, 5),     base_color = \"brown\",     linewidth = 1,     smooth = TRUE   ) +   theme_dark()"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_lm_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual-Tone Regression Line with Contrast-Aware Strokes — geom_lm_dual","title":"Dual-Tone Regression Line with Contrast-Aware Strokes — geom_lm_dual","text":"Draws regression line perceptually distinct dual-stroke coloring improved visibility.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_lm_dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual-Tone Regression Line with Contrast-Aware Strokes — geom_lm_dual","text":"","code":"geom_lm_dual(   data,   mapping,   method = \"lm\",   formula = y ~ x,   base_color = \"#777777\",   contrast = 4.5,   method_contrast = \"WCAG\",   ...,   linewidth = 1,   show.legend = NA )"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_lm_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dual-Tone Regression Line with Contrast-Aware Strokes — geom_lm_dual","text":"data data frame containing variables. mapping Aesthetic mapping, must include x y. method Regression method use (default \"lm\"). formula Model formula (default y ~ x). base_color Base color derive dual-tone pair . contrast Minimum contrast ratio aim (default 4.5). method_contrast Contrast algorithm use (\"WCAG\", \"APCA\", \"auto\"). ... Additional parameters passed geom_segment_dual(). linewidth Total visual line thickness mm (side strokes together). show.legend Whether show legend.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_lm_dual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dual-Tone Regression Line with Contrast-Aware Strokes — geom_lm_dual","text":"ggplot2 layer containing dual-stroke regression line.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_lm_dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dual-Tone Regression Line with Contrast-Aware Strokes — geom_lm_dual","text":"","code":"library(ggplot2)  # Simple test with linear trend set.seed(42) df <- data.frame(x = 1:100, y = 0.5 * (1:100) + rnorm(100)) ggplot(df, aes(x, y)) +   geom_point() +   geom_lm_dual(data = df, mapping = aes(x = x, y = y)) +   theme_minimal()   # Over grayscale tiles x <- seq(1, 11, length.out = 100) y <- 0.5 * x + rnorm(100, 0, 0.3) df1 <- data.frame(x = x, y = y)  # Tile fill definitions fill_colors <- data.frame(   x = 1:11,   fill = c(\"#000000\", \"#1b1b1b\", \"#444444\", \"#777777\", \"#aaaaaa\",            \"#dddddd\", \"#D5D5D5\", \"#E5E5E5\", \"#F5F5F5\", \"#FAFAFA\", \"#FFFFFF\") )  # Expand tile grid and join with fill colors tiles <- expand.grid(x = 1:11, y = seq(0, 1, length.out = 100)) |>   merge(fill_colors, by = \"x\")  ggplot() +   geom_tile(     data = tiles, aes(x = x, y = y, fill = fill),     width = 1, height = 10   ) +   scale_fill_identity() +   geom_point(     data = df1, aes(x = x, y = y),     colour = \"purple\", size = 2   ) +   ## Uncomment to use points with frames:   # geom_point(   #   data = df1, aes(x = x, y = y),   #   shape = 21, colour = \"white\", fill = \"black\", size = 3   # ) +   geom_lm_dual(     data = df1, mapping = aes(x = x, y = y),     linewidth = 2   ) +   coord_fixed() +   theme_minimal()"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_segment_dual.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual-Stroke Line Segments with Vertical Offset — geom_segment_dual","title":"Dual-Stroke Line Segments with Vertical Offset — geom_segment_dual","text":"Draws two vertically offset line segments separate colours, visibility varied backgrounds.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_segment_dual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual-Stroke Line Segments with Vertical Offset — geom_segment_dual","text":"","code":"geom_segment_dual(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   colour1 = NULL,   colour2 = NULL,   linewidth = NULL,   lineend = \"butt\",   aspect_ratio = 1,   ...,   arrow = NULL,   arrow.fill = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_segment_dual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dual-Stroke Line Segments with Vertical Offset — geom_segment_dual","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. colour1 colour top (upward-shifted) stroke. colour2 colour bottom (downward-shifted) stroke. linewidth Width line stroke (mm). lineend Line end style (round, butt, square). aspect_ratio Aspect ratio hint (currently unused grob logic reserved future layout tuning). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. arrow specification arrow heads, created grid::arrow(). arrow.fill fill colour use arrow head (closed). NULL means use colour aesthetic. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders().","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_segment_dual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dual-Stroke Line Segments with Vertical Offset — geom_segment_dual","text":"Dual-Stroke Line Segments Vertical Offset Draws two vertically offset line segments separate colours, visibility varied backgrounds.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_segment_dual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dual-Stroke Line Segments with Vertical Offset — geom_segment_dual","text":"","code":"# Simple black background test ggplot(data.frame(x = 1, xend = 2, y = 1, yend = 2),        aes(x = x, y = y, xend = xend, yend = yend)) +   geom_segment_dual(colour1 = \"white\", colour2 = \"black\", linewidth = 2) +   theme_void() +   theme(panel.background = element_rect(fill = \"gray20\"))   # Dual-stroke diagonal lines crossing contrasting backgrounds bg <- data.frame(   xmin = c(0, 5),   xmax = c(5, 10),   ymin = 0,   ymax = 5,   fill = c(\"black\", \"white\") )  line_data <- data.frame(   x = c(1, 9),   y = c(1, 1),   xend = c(9, 1),   yend = c(4, 4),   colour1 = c(\"#D9D9D9\", \"#D9D9D9\"),  # light stroke   colour2 = c(\"#333333\", \"#333333\")   # dark stroke )  ggplot() +   geom_rect(data = bg,   aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = fill),   inherit.aes = FALSE) +   scale_fill_identity() +   geom_segment_dual(     data = line_data,     aes(x = x, y = y, xend = xend, yend = yend),     colour1 = line_data$colour1,     colour2 = line_data$colour2,     linewidth = 1,     inherit.aes = FALSE   ) +   theme_void() +   coord_fixed() +   ggtitle(\"Two Diagonal Dual-Stroke Lines in Opposite Directions\")   # Multiple dual-stroke segments with arrowheads and grouping df <- data.frame(   x = c(1, 2, 3),   xend = c(2, 3, 4),   y = c(1, 2, 1),   yend = c(2, 1, 2),   colour1 = rep(\"white\", 3),   colour2 = rep(\"black\", 3),   group = factor(c(\"A\", \"B\", \"C\")) )  ggplot(df) +   geom_segment_dual(     aes(x = x, y = y, xend = xend, yend = yend, group = group),     colour1 = df$colour1,     colour2 = df$colour2,     linewidth = 1,     arrow = arrow(length = unit(0.15, \"inches\"), type = \"closed\")   ) +   coord_fixed() +   theme_dark()"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_text_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Contrast-Aware Text Geom — geom_text_contrast","title":"Contrast-Aware Text Geom — geom_text_contrast","text":"Automatically adjusts text color readability varying background colors using WCAG APCA contrast.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_text_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contrast-Aware Text Geom — geom_text_contrast","text":"","code":"geom_text_contrast(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   method = \"auto\",   contrast = 4.5,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   background = NULL )"},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_text_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contrast-Aware Text Geom — geom_text_contrast","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. method Contrast method use: \"WCAG\", \"APCA\", \"auto\". contrast Threshold ensure text background (defaults 4.5). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. include legend keys levels, even data exists, use TRUE.  NA, levels shown legend, unobserved levels omitted. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. annotation_borders(). background character vector background fill colors (hex codes), used contrast computation.","code":""},{"path":"https://bwanniarachchige2.github.io/ggtwotone/reference/geom_text_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contrast-Aware Text Geom — geom_text_contrast","text":"","code":"library(ggplot2)  # Grayscale A–E tiles: testing contrast df <- data.frame(   x = 1:5,   y = 1,   label = LETTERS[1:5],   fill = c(\"#000000\", \"#222222\", \"#666666\", \"#DDDDDD\", \"#FFFFFF\") )  ggplot(df, aes(x, y)) +   geom_tile(aes(fill = fill), width = 1, height = 1) +   geom_text_contrast(     aes(label = label),     background = df$fill,     size = 7   ) +   scale_fill_identity() +   coord_fixed() +   theme_void() +   labs(title = \"Contrast-Aware Text on Varying Backgrounds\")   # Simulated region × risk category df_risk <- expand.grid(   region = LETTERS[1:6],   zone = paste0(\"Z\", 1:6) )  df_risk$risk_level <- sample(   c(\"Low\", \"Moderate\", \"High\", \"Critical\", \"Severe\", \"Extreme\"),   size = nrow(df_risk), replace = TRUE ) df_risk$label <- paste(df_risk$region, df_risk$zone)  risk_colors <- c(   \"Low\" = \"gray80\",   \"Moderate\" = \"skyblue\",   \"High\" = \"orange\",   \"Critical\" = \"firebrick\",   \"Severe\" = \"darkred\",   \"Extreme\" = \"navy\" )  df_risk$fill_color <- risk_colors[df_risk$risk_level]  ggplot(df_risk, aes(x = region, y = zone, fill = risk_level)) +   geom_tile(color = \"white\") +   geom_text_contrast(     aes(label = label),     background = df_risk$fill_color,     size = 3,     fontface = \"bold\"   ) +   scale_fill_manual(values = risk_colors) +   labs(     title = \"Simulated Risk Map (Auto Contrast Labels)\",     fill = \"Risk Level\"   ) +   theme_minimal()"}]
